import{o as n,c as s,a,t,F as e,r as p,b as o}from"./app.38facd8e.js";import{s as c}from"./spring.es.59801667.js";const r={name:"App",setup(){const n=c(0,{damping:10});n.value=500;let s=!1;return setInterval((()=>{if(s=!s,!s)return n.value=500;n.value=0}),1500),{mySpring:n}}},i={class:"text--center"};r.render=function(p,o,c,r,l,u){return n(),s(e,null,[a("div",{class:"circle",style:{transform:`translateX(${r.mySpring}px)`}},null,4),a("div",i,t(r.mySpring),1)],64)};const l={components:{"spring-example":r}},u='{"title":"Animation Functions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Spring","slug":"spring"},{"level":3,"title":"Using","slug":"using"},{"level":3,"title":"Spring Props","slug":"spring-props"},{"level":3,"title":"Spring Value","slug":"spring-value"},{"level":2,"title":"Parallax","slug":"parallax"},{"level":3,"title":"COMING SOON","slug":"coming-soon"},{"level":2,"title":"Present","slug":"present"},{"level":3,"title":"COMING SOON","slug":"coming-soon-2"}],"relativePath":"animation-functions.md","lastUpdated":1612110220972}',d=o('<h1 id="animation-functions"><a class="header-anchor" href="#animation-functions" aria-hidden="true">#</a> Animation Functions</h1><p>Composition-API-friendly functions to support model-based API</p><ul><li><a href="#spring"><code>Spring</code></a></li><li><a href="#parallax"><code>Parallax</code></a></li><li><a href="#present"><code>Present</code></a></li></ul><h2 id="spring"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><p>The primary animation component, which is a spring-physics based. Its main role is to move property from one value to another, with more natural animation and easing.</p>',5),k=o('<h3 id="using"><a class="header-anchor" href="#using" aria-hidden="true">#</a> Using</h3><p><code>spring</code> function task <a href="#spring-value"><code>SpringValue</code></a> as its first argument, and <a href="#spring-props"><code>SpringProps</code></a> optional as the second argument.</p><h4 id="single-value"><a class="header-anchor" href="#single-value" aria-hidden="true">#</a> Single Value</h4><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> spring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue3-spring&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// If you passed to the spring a number as it&#39;s value</span>\n    <span class="token comment">// it return a Vue ref object.</span>\n    <span class="token keyword">const</span> mySpring <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token comment">/* [, config] */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// To update the spring desired value</span>\n    mySpring<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> mySpring <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="multiple-values"><a class="header-anchor" href="#multiple-values" aria-hidden="true">#</a> Multiple Values</h4><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> spring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue3-spring&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// If you passed to the spring an object of values</span>\n    <span class="token comment">// it return a Vue reactive object, for those values</span>\n    <span class="token keyword">const</span> mySpring <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> dumping<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// To update the spring desired values</span>\n    mySpring<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n    mySpring<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> mySpring <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="reactive-values"><a class="header-anchor" href="#reactive-values" aria-hidden="true">#</a> Reactive Values</h4><p><code>spring</code> also accepts Vue reactive data type (<code>reactive</code>, <code>ref</code>) as its value. It will automatically update the current spring value, when the reactive values changed.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> spring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue3-spring&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> mouseSpring <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span>mouse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// this will update mouseSpring as well</span>\n    mouse<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> singleValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> singleValueSpring <span class="token operator">=</span> <span class="token function">spring</span><span class="token punctuation">(</span>singleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// this will update singleValueSpring as well</span>\n    singleValue<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      mouseSpring<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="spring-props"><a class="header-anchor" href="#spring-props" aria-hidden="true">#</a> Spring Props</h3><p>To config the spring physical properties, and initial values</p><table><thead><tr><th>prop</th><th>type</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>from</td><td><code>number</code> | <code>object</code></td><td>0</td><td>init value</td></tr><tr><td>stiffness</td><td><code>number</code></td><td>170</td><td>spring stiffness, in kg / s^2</td></tr><tr><td>damping</td><td><code>number</code></td><td>26</td><td>damping constant, in kg / s</td></tr><tr><td>mass</td><td><code>number</code></td><td>1</td><td>spring mass</td></tr><tr><td>velocity</td><td><code>number</code></td><td>0</td><td>initial velocity</td></tr><tr><td>precision</td><td><code>number</code></td><td>2</td><td>number of digits to round the values, increase the number to increase precision</td></tr><tr><td>framesPerSecond</td><td><code>number</code></td><td>60</td><td>display refresh rate</td></tr><tr><td>isPendulum</td><td><code>boolean</code></td><td>false</td><td>is the animation will start agin after is dumped</td></tr></tbody></table><h3 id="spring-value"><a class="header-anchor" href="#spring-value" aria-hidden="true">#</a> Spring Value</h3><p>Spring value could be <code>number</code>, <code>object</code>, Vue <code>reactive</code> object, or Vue <code>ref</code> object.</p><table><thead><tr><th>type</th><th>return type</th><th>auto update</th><th>multiple values</th></tr></thead><tbody><tr><td><code>number</code></td><td><code>ref</code></td><td>false</td><td>false</td></tr><tr><td><code>object</code></td><td><code>reactive</code></td><td>false</td><td>true</td></tr><tr><td><code>ref</code></td><td><code>ref</code></td><td>true</td><td>false</td></tr><tr><td><code>reactive</code></td><td><code>reactive</code></td><td>true</td><td>true</td></tr></tbody></table><h2 id="parallax"><a class="header-anchor" href="#parallax" aria-hidden="true">#</a> Parallax</h2><p>Used move property from one value to another, based on the scrolled distance.</p><h3 id="coming-soon"><a class="header-anchor" href="#coming-soon" aria-hidden="true">#</a> COMING SOON</h3><h2 id="present"><a class="header-anchor" href="#present" aria-hidden="true">#</a> Present</h2><p>Used to apply CSS animation class to an element, when it enters the view-port.</p><h3 id="coming-soon-2"><a class="header-anchor" href="#coming-soon-2" aria-hidden="true">#</a> COMING SOON</h3>',21);l.render=function(t,e,o,c,r,i){const l=p("spring-example");return n(),s("div",null,[d,a(l),k])};export default l;export{u as __pageData};
